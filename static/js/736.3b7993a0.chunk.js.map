{"version":3,"file":"static/js/736.3b7993a0.chunk.js","mappings":"8SAGAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,oGACyBF,EAAAA,EAAAA,IAAA,qCAAwCC,IADjE,cACQE,EADR,yBAESA,EAASC,MAFlB,2EAaeC,EAAmB,GAAnBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAkCC,GAAlC,uFACsBN,EAAAA,EAAAA,IAAA,gBACTM,EADS,oBACUL,EADV,oBADtB,cACQM,EADR,yBAISA,EAAMH,MAJf,2EAOeI,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BF,GAA/B,uFACwBN,EAAAA,EAAAA,IAAA,gBACXM,EADW,4BACgBL,EADhB,oBADxB,cACQQ,EADR,yBAISA,EAAQL,MAJjB,2EAOeM,EAAmB,GAAnBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAkCJ,GAAlC,uFACwBN,EAAAA,EAAAA,IAAA,gBACXM,EADW,4BACgBL,EADhB,2BADxB,cACQU,EADR,yBAISA,EAAQP,MAJjB,kEAeAM,EAAmBE,UAAY,CAAEN,QAASO,IAAAA,OAAAA,YAC1CL,EAAgBI,UAAY,CAAEN,QAASO,IAAAA,OAAAA,YACvCR,EAAmBO,UAAY,CAAEN,QAASO,IAAAA,OAAAA,W,qJChD7BC,EAAWC,EAAAA,GAAAA,GAAH,4EAKRC,EAAWD,EAAAA,GAAAA,GAAH,wMAWRE,EAAWF,EAAAA,GAAAA,EAAH,iIAORG,EAAWH,EAAAA,GAAAA,EAAH,oJ,SCWrB,EA9Ba,WACX,IAAQT,GAAYa,EAAAA,EAAAA,MAAZb,QACR,GAAwBc,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAIA,OAHAC,EAAAA,EAAAA,YAAU,YACRf,EAAAA,EAAAA,IAAgBF,GAASkB,KAAKF,EAC/B,GAAE,CAAChB,IACCe,GAKH,SAACI,EAAA,EAAD,CAAKC,GAAG,UAAR,UACE,SAACZ,EAAD,UACmB,IAAhBO,EAAKM,OACF,mDACAN,EAAKA,KAAKO,KAAI,WAAoCC,GAApC,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACZ,UAAChB,EAAD,YACE,gBACEiB,IAAG,yCAAoCD,GACvCE,MAAO,IACPC,IAAI,MAEN,SAACjB,EAAD,UAAWY,KACX,UAACb,EAAD,WAAU,SAAOc,OAPJF,EADH,QARf,IAsBV,C","sources":["Services/Api.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'fe65ae3947785f9cceedf502c682301b';\n\nasync function fetchMoviesTrends() {\n  const trending = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  return trending.data;\n}\n\n// async function fetchMoviesBySearch(searchQuery) {\n//   const movie = await axios.get(\n//     `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${searchQuery.query}`\n//   );\n//   console.log(movie);\n//   return movie.data;\n// }\n\nasync function fetchMoviesDetails(movieId) {\n  const movie = await axios.get(\n    `movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return movie.data;\n}\n\nasync function fetchMoviesCast(movieId) {\n  const credits = await axios.get(\n    `movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return credits.data;\n}\n\nasync function fetchMoviesReviews(movieId) {\n  const reviews = await axios.get(\n    `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return reviews.data;\n}\n\nexport {\n  fetchMoviesTrends,\n  // fetchMoviesBySearch,\n  fetchMoviesDetails,\n  fetchMoviesCast,\n  fetchMoviesReviews,\n};\n\nfetchMoviesReviews.propTypes = { movieId: PropTypes.number.isRequired };\nfetchMoviesCast.propTypes = { movieId: PropTypes.number.isRequired };\nfetchMoviesDetails.propTypes = { movieId: PropTypes.number.isRequired };\n// fetchMoviesBySearch.propTypes = { movieId: PropTypes.string.isRequired };\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\nexport const CastCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  max-width: 180px;\n  justify-content: space-between;\n  &:hover {\n    transform: scale(1.06);\n  }\n`;\n\nexport const CastChar = styled.p`\n  padding-left: 5px;\n  padding-right: 5px;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: grey;\n`;\nexport const CastName = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n  color: black;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin-top: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Box } from 'components/Box';\nimport { fetchMoviesCast } from 'Services/Api';\nimport { CastCard, CastList, CastName, CastChar } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    fetchMoviesCast(movieId).then(setCast);\n  }, [movieId]);\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <Box as=\"section\">\n      <CastList>\n        {cast.length === 0\n          ? \"Sorry, we don't have information about this cast\"\n          : cast.cast.map(({ name, character, profile_path }, index) => (\n              <CastCard key={index}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  width={180}\n                  alt=\"\"\n                />\n                <CastName>{name}</CastName>\n                <CastChar>char: {character}</CastChar>\n              </CastCard>\n            ))}\n      </CastList>\n    </Box>\n  );\n};\nexport default Cast;\n"],"names":["axios","KEY","fetchMoviesTrends","trending","data","fetchMoviesDetails","movieId","movie","fetchMoviesCast","credits","fetchMoviesReviews","reviews","propTypes","PropTypes","CastList","styled","CastCard","CastChar","CastName","useParams","useState","cast","setCast","useEffect","then","Box","as","length","map","index","name","character","profile_path","src","width","alt"],"sourceRoot":""}